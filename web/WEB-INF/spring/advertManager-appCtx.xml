<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
              
              

    <!--
        Main application context configuration files.

        Defines infrastructure beans 
            DataSource          - specifies database driver,url , username and password
            JDBCTemplate        - spring object which uses datasource.used to execute JDBC statements
            SessionFactory      - hibernate object which uses datasource . used to initialize hibernate subsystem
            TransactionManager and tx:annotatondriver - specifies transaction handling 
            Properties Configurer - allows to override configuration values on beans and specify them in external property file 
            
        Defines service beans:
            Service beans are needed to perform our application business logic.
            They may use several DAO beans to access corresponding tables.
            Transactions are defined on methods of the service beans
        
        
        Defines DAO beans:
            DAO beans are needed to read and write Model object to/from Database
            We define single DAO bean for each object in our model.
            Every bean is an instance of the same class - com.mne.advertmanager.dao.GenericDaoHibernateImpl
            This is so because on every object in our model we perform the 
            same set of operations  CRUD={ Create,Read,Update Delete}
            We define single genericDAO bean with dataSource property.
            This bean is the parent bean for all other DAO beans
        
        
    -->


    <!--=====================================================infrastructure beans start ==============================================================-->
    
    <bean class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
            <property name="location" value="/WEB-INF/spring/advertmanager.properties"/>
    </bean>

    <bean id="advertManagerC3P0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="com.oracle.jdbc.driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/mysql"/>
        <property name="user" value="admin"/>
        <property name="password" value="admin1234"/>
        <property name="maxIdleTime" value="6000"/>
    </bean>
    
    <bean id="adManJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="advertManagerC3P0DataSource"/>
    </bean>

    <!--    
    <bean id="advertManagerSessionFactory" class="com.mne.adman.test.DummySessionFactory">
    </bean>
    -->

    <bean id="advertManagerSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="advertManagerC3P0DataSource"/>
        
        <property name="configLocation" value="/WEB-INF/spring/hibernate.cfg.xml" />
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
                hibernate.show_sql=false
            </value>
        </property>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="advertManagerSessionFactory" />
        </property>
    </bean>        
            
    <tx:annotation-driven/>

    <!--=============================================================== infrastructure beans end ===========================================================-->
    
    <!--============================================================== user DAO objects start ====================================================================-->
    <!--
        DAO beans are needed to read and write Model object to/from Database
        We define single DAO bean for each object in our model.
        Every bean is an instance of the same class - com.mne.advertmanager.dao.GenericDaoHibernateImpl
        This is so because on every object in our model we perform the 
        same set of operations  CRUD={ Create,Read,Update Delete}
    -->
    
    <bean id="adManGenericDao"  class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" abstract="true" scope="prototype">
        <property name="sessionFactory">
            <ref bean="advertManagerSessionFactory"/>
        </property>
    </bean>
    
    <bean id="productDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.Product</value>
        </constructor-arg>
    </bean>
    
    <bean id="productGroupDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.ProductGroup</value>
        </constructor-arg>
    </bean>    
    
    <bean id="authorDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.Author</value>
        </constructor-arg>
    </bean>
    
    <bean id="affiliateDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.Affiliate</value>
        </constructor-arg>
    </bean>
    
    <bean id="accessSourceDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.AccessSource</value>
        </constructor-arg>
    </bean>

    <bean id="accessLogDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.AccessLog</value>
        </constructor-arg>
    </bean>
    
    <bean id="purchaseOrderDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.model.PurchaseOrder</value>
        </constructor-arg>
    </bean>
    
    <bean id="projectDao"  parent="adManGenericDao" class="com.mne.advertmanager.dao.GenericDaoHibernateImpl" >
        <constructor-arg >
            <value type="java.lang.Class">com.mne.advertmanager.parsergen.model.Project</value>
        </constructor-arg>
    </bean>    
    
<!--============================================================== user DAO     objects end   ===============================================================-->    
<!--=============================================================  user service beans start ===============================================================--> 
    <!--
        Service beans are needed to perform our application business logic.
        They may use several DAO beans to access corresponding tables.
        Transactions are defined on methods of the service beans
    -->

    <bean id="advertManagerProductService" class="com.mne.advertmanager.service.ProductService">
        <property name="productDao"          ref="productDao"/>
        <property name="productGroupService" ref="productGroupService"/>        
        <property name="authorService"       ref="authorService"/>        
    </bean>


    <bean id="adManDataGenService" class="com.mne.advertmanager.service.DataGenService">
        <property name="affiliateService" ref="affiliateService"/>
        <property name="authorDao"        ref="authorDao"/>
        <property name="productDao"       ref="productDao"/>
        <property name="productGroupDao"  ref="productGroupDao"/>
        <property name="accessSourceDao"  ref="accessSourceDao"/>
        <property name="accessLogDao"     ref="accessLogDao"/>
        <property name="purchaseOrderDao" ref="purchaseOrderDao"/>
        <property name="entityFactory"    ref="adManEntityFactory"/>
    </bean>
    
    <bean id="productGroupService" class="com.mne.advertmanager.service.ProductGroupService">
        <property name="productGroupDao" ref="productGroupDao"/>
        <property name="affiliateService"    ref="affiliateService"/>                
    </bean>
    
    <bean id="affiliateService" class="com.mne.advertmanager.service.AffiliateService">
        <property name="affiliateDao" ref="affiliateDao"/>
        <property name="jdbcTemplate" ref ="adManJdbcTemplate"/>
        <property name="productGroupService" ref="productGroupService"/>
    </bean>    
    
    <bean id="authorService" class="com.mne.advertmanager.service.AuthorService">
        <property name="authorDao" ref="authorDao"/>
    </bean>    
    <bean id="authorService" class="com.mne.advertmanager.service.BillingProjectService">
        <property name="projectDao" ref="projectDao"/>
    </bean>    
    
<!--=============================================================  user service beans end ===============================================================--> 
    
    <!-- Utility Bean , Used by dataGenService to create objects -->
    <bean id="adManEntityFactory" class="com.mne.advertmanager.util.EntityFactory"/>
    
    

</beans>
